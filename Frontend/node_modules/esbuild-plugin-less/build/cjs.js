var O=Object.create;var m=Object.defineProperty,P=Object.defineProperties,D=Object.getOwnPropertyDescriptor,F=Object.getOwnPropertyDescriptors,M=Object.getOwnPropertyNames,L=Object.getOwnPropertySymbols,b=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty,k=Object.prototype.propertyIsEnumerable;var y=(e,t,s)=>t in e?m(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s,I=(e,t)=>{for(var s in t||={})w.call(t,s)&&y(e,s,t[s]);if(L)for(var s of L(t))k.call(t,s)&&y(e,s,t[s]);return e},R=(e,t)=>P(e,F(t));var T=(e,t)=>{for(var s in t)m(e,s,{get:t[s],enumerable:!0})},S=(e,t,s,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of M(t))!w.call(e,o)&&o!==s&&m(e,o,{get:()=>t[o],enumerable:!(n=D(t,o))||n.enumerable});return e};var p=(e,t,s)=>(s=e!=null?O(b(e)):{},S(t||!e||!e.__esModule?m(s,"default",{value:e,enumerable:!0}):s,e)),U=e=>S(m({},"__esModule",{value:!0}),e);var B={};T(B,{lessLoader:()=>A});module.exports=U(B);var u=p(require("path")),C=require("fs"),E=p(require("less"));var f=p(require("fs")),c=p(require("path")),W=/@import.*?["']([^"']+)["'].*?/,j=/@import.*?["']([^"']+)["'].*?/g,q=/(?:\/\*(?:[\s\S]*?)\*\/)|(\/\/(?:.*)$)/gm,z=[".css",".less"],g=(e,t=[])=>{try{let s=c.default.dirname(e),a=(f.default.readFileSync(e).toString("utf8").replace(q,"").match(j)||[]).map(r=>r.match(W)[1]).filter(r=>!!r).map(r=>{let l=c.default.resolve(s,c.default.extname(r)?r:`${r}.less`);if(!f.default.existsSync(l))for(let d=0;d<t.length;d++){let v=c.default.resolve(t[d],c.default.extname(r)?r:`${r}.less`);if(f.default.existsSync(v)){l=v;break}}return l});return a.reduce((r,l)=>[...r,...g(l,t)],a).filter(r=>z.includes(c.default.extname(r).toLowerCase()))}catch(s){return[]}},$=e=>{let t=e.extract.filter(n=>n),s=t.length===3?t[1]:t[0];return{text:e.message,location:{namespace:"file",file:e.filename,line:e.line,column:e.column,lineText:s}}};var A=(e={},t={})=>({name:"less-loader",setup:s=>{let n=t.filter;s.onResolve({filter:n||/\.less$/,namespace:"file"},o=>{let i=u.default.resolve(process.cwd(),u.default.relative(process.cwd(),o.resolveDir),o.path);return{path:i,watchFiles:[i,...g(i,e.paths||[])]}}),s.onLoad({filter:n||/\.less$/,namespace:"file"},async o=>{let i=await C.promises.readFile(o.path,"utf-8"),a=u.default.dirname(o.path),x=R(I({filename:o.path,relativeUrls:!0},e),{paths:[...e.paths||[],a]});try{return{contents:(await E.default.render(i,x)).css,loader:"css",resolveDir:a}}catch(h){return{errors:[$(h)],resolveDir:a}}})}});0&&(module.exports={lessLoader});
